package com.sunshine.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.coolu.nokelock.bike.bean.UserEntityBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY_BEAN".
*/
public class UserEntityBeanDao extends AbstractDao<UserEntityBean, Void> {

    public static final String TABLENAME = "USER_ENTITY_BEAN";

    /**
     * Properties of entity UserEntityBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", false, "USER_ID");
        public final static Property NicName = new Property(1, String.class, "nicName", false, "NIC_NAME");
        public final static Property Idcheck = new Property(2, String.class, "idcheck", false, "IDCHECK");
        public final static Property PinNo = new Property(3, String.class, "pinNo", false, "PIN_NO");
        public final static Property PinTime = new Property(4, String.class, "pinTime", false, "PIN_TIME");
        public final static Property UserToken = new Property(5, String.class, "userToken", false, "USER_TOKEN");
        public final static Property LoginTime = new Property(6, String.class, "loginTime", false, "LOGIN_TIME");
        public final static Property Deposit = new Property(7, String.class, "deposit", false, "DEPOSIT");
        public final static Property DefaultDeposit = new Property(8, String.class, "defaultDeposit", false, "DEFAULT_DEPOSIT");
        public final static Property OrderNo = new Property(9, String.class, "orderNo", false, "ORDER_NO");
        public final static Property UserMoney = new Property(10, String.class, "userMoney", false, "USER_MONEY");
        public final static Property UserBonus = new Property(11, String.class, "userBonus", false, "USER_BONUS");
        public final static Property UserType = new Property(12, String.class, "userType", false, "USER_TYPE");
        public final static Property UserStatus = new Property(13, String.class, "userStatus", false, "USER_STATUS");
        public final static Property UserCredit = new Property(14, String.class, "userCredit", false, "USER_CREDIT");
        public final static Property IdealMoney = new Property(15, String.class, "idealMoney", false, "IDEAL_MONEY");
        public final static Property UserFrom = new Property(16, String.class, "userFrom", false, "USER_FROM");
        public final static Property UserFromUrl = new Property(17, String.class, "userFromUrl", false, "USER_FROM_URL");
        public final static Property UserLabel = new Property(18, String.class, "userLabel", false, "USER_LABEL");
        public final static Property ShebieId = new Property(19, String.class, "shebieId", false, "SHEBIE_ID");
        public final static Property Ridingprice = new Property(20, String.class, "ridingprice", false, "RIDINGPRICE");
        public final static Property Lockid = new Property(21, String.class, "lockid", false, "LOCKID");
        public final static Property UserPic = new Property(22, String.class, "userPic", false, "USER_PIC");
        public final static Property Openmoney = new Property(23, float.class, "openmoney", false, "OPENMONEY");
        public final static Property UserLevel = new Property(24, String.class, "userLevel", false, "USER_LEVEL");
        public final static Property UserLevelEndTime = new Property(25, String.class, "userLevelEndTime", false, "USER_LEVEL_END_TIME");
        public final static Property BarCode = new Property(26, String.class, "barCode", false, "BAR_CODE");
        public final static Property Lockmac = new Property(27, String.class, "lockmac", false, "LOCKMAC");
        public final static Property Locktype = new Property(28, String.class, "locktype", false, "LOCKTYPE");
        public final static Property Lockdata = new Property(29, String.class, "lockdata", false, "LOCKDATA");
        public final static Property Starttime = new Property(30, String.class, "starttime", false, "STARTTIME");
        public final static Property Idno = new Property(31, String.class, "idno", false, "IDNO");
        public final static Property UserName = new Property(32, String.class, "userName", false, "USER_NAME");
        public final static Property Forcemoney = new Property(33, String.class, "forcemoney", false, "FORCEMONEY");
        public final static Property Cardprice = new Property(34, String.class, "cardprice", false, "CARDPRICE");
        public final static Property Isbuyridingcard = new Property(35, String.class, "isbuyridingcard", false, "ISBUYRIDINGCARD");
        public final static Property Newopenmoney = new Property(36, float.class, "newopenmoney", false, "NEWOPENMONEY");
        public final static Property Warningmoney = new Property(37, float.class, "warningmoney", false, "WARNINGMONEY");
    };


    public UserEntityBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY_BEAN\" (" + //
                "\"USER_ID\" TEXT," + // 0: userId
                "\"NIC_NAME\" TEXT," + // 1: nicName
                "\"IDCHECK\" TEXT," + // 2: idcheck
                "\"PIN_NO\" TEXT," + // 3: pinNo
                "\"PIN_TIME\" TEXT," + // 4: pinTime
                "\"USER_TOKEN\" TEXT," + // 5: userToken
                "\"LOGIN_TIME\" TEXT," + // 6: loginTime
                "\"DEPOSIT\" TEXT," + // 7: deposit
                "\"DEFAULT_DEPOSIT\" TEXT," + // 8: defaultDeposit
                "\"ORDER_NO\" TEXT," + // 9: orderNo
                "\"USER_MONEY\" TEXT," + // 10: userMoney
                "\"USER_BONUS\" TEXT," + // 11: userBonus
                "\"USER_TYPE\" TEXT," + // 12: userType
                "\"USER_STATUS\" TEXT," + // 13: userStatus
                "\"USER_CREDIT\" TEXT," + // 14: userCredit
                "\"IDEAL_MONEY\" TEXT," + // 15: idealMoney
                "\"USER_FROM\" TEXT," + // 16: userFrom
                "\"USER_FROM_URL\" TEXT," + // 17: userFromUrl
                "\"USER_LABEL\" TEXT," + // 18: userLabel
                "\"SHEBIE_ID\" TEXT," + // 19: shebieId
                "\"RIDINGPRICE\" TEXT," + // 20: ridingprice
                "\"LOCKID\" TEXT," + // 21: lockid
                "\"USER_PIC\" TEXT," + // 22: userPic
                "\"OPENMONEY\" REAL NOT NULL ," + // 23: openmoney
                "\"USER_LEVEL\" TEXT," + // 24: userLevel
                "\"USER_LEVEL_END_TIME\" TEXT," + // 25: userLevelEndTime
                "\"BAR_CODE\" TEXT," + // 26: barCode
                "\"LOCKMAC\" TEXT," + // 27: lockmac
                "\"LOCKTYPE\" TEXT," + // 28: locktype
                "\"LOCKDATA\" TEXT," + // 29: lockdata
                "\"STARTTIME\" TEXT," + // 30: starttime
                "\"IDNO\" TEXT," + // 31: idno
                "\"USER_NAME\" TEXT," + // 32: userName
                "\"FORCEMONEY\" TEXT," + // 33: forcemoney
                "\"CARDPRICE\" TEXT," + // 34: cardprice
                "\"ISBUYRIDINGCARD\" TEXT," + // 35: isbuyridingcard
                "\"NEWOPENMONEY\" REAL NOT NULL ," + // 36: newopenmoney
                "\"WARNINGMONEY\" REAL NOT NULL );"); // 37: warningmoney
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntityBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String nicName = entity.getNicName();
        if (nicName != null) {
            stmt.bindString(2, nicName);
        }
 
        String idcheck = entity.getIdcheck();
        if (idcheck != null) {
            stmt.bindString(3, idcheck);
        }
 
        String pinNo = entity.getPinNo();
        if (pinNo != null) {
            stmt.bindString(4, pinNo);
        }
 
        String pinTime = entity.getPinTime();
        if (pinTime != null) {
            stmt.bindString(5, pinTime);
        }
 
        String userToken = entity.getUserToken();
        if (userToken != null) {
            stmt.bindString(6, userToken);
        }
 
        String loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindString(7, loginTime);
        }
 
        String deposit = entity.getDeposit();
        if (deposit != null) {
            stmt.bindString(8, deposit);
        }
 
        String defaultDeposit = entity.getDefaultDeposit();
        if (defaultDeposit != null) {
            stmt.bindString(9, defaultDeposit);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(10, orderNo);
        }
 
        String userMoney = entity.getUserMoney();
        if (userMoney != null) {
            stmt.bindString(11, userMoney);
        }
 
        String userBonus = entity.getUserBonus();
        if (userBonus != null) {
            stmt.bindString(12, userBonus);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(13, userType);
        }
 
        String userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindString(14, userStatus);
        }
 
        String userCredit = entity.getUserCredit();
        if (userCredit != null) {
            stmt.bindString(15, userCredit);
        }
 
        String idealMoney = entity.getIdealMoney();
        if (idealMoney != null) {
            stmt.bindString(16, idealMoney);
        }
 
        String userFrom = entity.getUserFrom();
        if (userFrom != null) {
            stmt.bindString(17, userFrom);
        }
 
        String userFromUrl = entity.getUserFromUrl();
        if (userFromUrl != null) {
            stmt.bindString(18, userFromUrl);
        }
 
        String userLabel = entity.getUserLabel();
        if (userLabel != null) {
            stmt.bindString(19, userLabel);
        }
 
        String shebieId = entity.getShebieId();
        if (shebieId != null) {
            stmt.bindString(20, shebieId);
        }
 
        String ridingprice = entity.getRidingprice();
        if (ridingprice != null) {
            stmt.bindString(21, ridingprice);
        }
 
        String lockid = entity.getLockid();
        if (lockid != null) {
            stmt.bindString(22, lockid);
        }
 
        String userPic = entity.getUserPic();
        if (userPic != null) {
            stmt.bindString(23, userPic);
        }
        stmt.bindDouble(24, entity.getOpenmoney());
 
        String userLevel = entity.getUserLevel();
        if (userLevel != null) {
            stmt.bindString(25, userLevel);
        }
 
        String userLevelEndTime = entity.getUserLevelEndTime();
        if (userLevelEndTime != null) {
            stmt.bindString(26, userLevelEndTime);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(27, barCode);
        }
 
        String lockmac = entity.getLockmac();
        if (lockmac != null) {
            stmt.bindString(28, lockmac);
        }
 
        String locktype = entity.getLocktype();
        if (locktype != null) {
            stmt.bindString(29, locktype);
        }
 
        String lockdata = entity.getLockdata();
        if (lockdata != null) {
            stmt.bindString(30, lockdata);
        }
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(31, starttime);
        }
 
        String idno = entity.getIdno();
        if (idno != null) {
            stmt.bindString(32, idno);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(33, userName);
        }
 
        String forcemoney = entity.getForcemoney();
        if (forcemoney != null) {
            stmt.bindString(34, forcemoney);
        }
 
        String cardprice = entity.getCardprice();
        if (cardprice != null) {
            stmt.bindString(35, cardprice);
        }
 
        String isbuyridingcard = entity.getIsbuyridingcard();
        if (isbuyridingcard != null) {
            stmt.bindString(36, isbuyridingcard);
        }
        stmt.bindDouble(37, entity.getNewopenmoney());
        stmt.bindDouble(38, entity.getWarningmoney());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntityBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String nicName = entity.getNicName();
        if (nicName != null) {
            stmt.bindString(2, nicName);
        }
 
        String idcheck = entity.getIdcheck();
        if (idcheck != null) {
            stmt.bindString(3, idcheck);
        }
 
        String pinNo = entity.getPinNo();
        if (pinNo != null) {
            stmt.bindString(4, pinNo);
        }
 
        String pinTime = entity.getPinTime();
        if (pinTime != null) {
            stmt.bindString(5, pinTime);
        }
 
        String userToken = entity.getUserToken();
        if (userToken != null) {
            stmt.bindString(6, userToken);
        }
 
        String loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindString(7, loginTime);
        }
 
        String deposit = entity.getDeposit();
        if (deposit != null) {
            stmt.bindString(8, deposit);
        }
 
        String defaultDeposit = entity.getDefaultDeposit();
        if (defaultDeposit != null) {
            stmt.bindString(9, defaultDeposit);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(10, orderNo);
        }
 
        String userMoney = entity.getUserMoney();
        if (userMoney != null) {
            stmt.bindString(11, userMoney);
        }
 
        String userBonus = entity.getUserBonus();
        if (userBonus != null) {
            stmt.bindString(12, userBonus);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(13, userType);
        }
 
        String userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindString(14, userStatus);
        }
 
        String userCredit = entity.getUserCredit();
        if (userCredit != null) {
            stmt.bindString(15, userCredit);
        }
 
        String idealMoney = entity.getIdealMoney();
        if (idealMoney != null) {
            stmt.bindString(16, idealMoney);
        }
 
        String userFrom = entity.getUserFrom();
        if (userFrom != null) {
            stmt.bindString(17, userFrom);
        }
 
        String userFromUrl = entity.getUserFromUrl();
        if (userFromUrl != null) {
            stmt.bindString(18, userFromUrl);
        }
 
        String userLabel = entity.getUserLabel();
        if (userLabel != null) {
            stmt.bindString(19, userLabel);
        }
 
        String shebieId = entity.getShebieId();
        if (shebieId != null) {
            stmt.bindString(20, shebieId);
        }
 
        String ridingprice = entity.getRidingprice();
        if (ridingprice != null) {
            stmt.bindString(21, ridingprice);
        }
 
        String lockid = entity.getLockid();
        if (lockid != null) {
            stmt.bindString(22, lockid);
        }
 
        String userPic = entity.getUserPic();
        if (userPic != null) {
            stmt.bindString(23, userPic);
        }
        stmt.bindDouble(24, entity.getOpenmoney());
 
        String userLevel = entity.getUserLevel();
        if (userLevel != null) {
            stmt.bindString(25, userLevel);
        }
 
        String userLevelEndTime = entity.getUserLevelEndTime();
        if (userLevelEndTime != null) {
            stmt.bindString(26, userLevelEndTime);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(27, barCode);
        }
 
        String lockmac = entity.getLockmac();
        if (lockmac != null) {
            stmt.bindString(28, lockmac);
        }
 
        String locktype = entity.getLocktype();
        if (locktype != null) {
            stmt.bindString(29, locktype);
        }
 
        String lockdata = entity.getLockdata();
        if (lockdata != null) {
            stmt.bindString(30, lockdata);
        }
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(31, starttime);
        }
 
        String idno = entity.getIdno();
        if (idno != null) {
            stmt.bindString(32, idno);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(33, userName);
        }
 
        String forcemoney = entity.getForcemoney();
        if (forcemoney != null) {
            stmt.bindString(34, forcemoney);
        }
 
        String cardprice = entity.getCardprice();
        if (cardprice != null) {
            stmt.bindString(35, cardprice);
        }
 
        String isbuyridingcard = entity.getIsbuyridingcard();
        if (isbuyridingcard != null) {
            stmt.bindString(36, isbuyridingcard);
        }
        stmt.bindDouble(37, entity.getNewopenmoney());
        stmt.bindDouble(38, entity.getWarningmoney());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserEntityBean readEntity(Cursor cursor, int offset) {
        UserEntityBean entity = new UserEntityBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nicName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idcheck
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pinNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pinTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userToken
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // loginTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deposit
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // defaultDeposit
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // orderNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userMoney
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userBonus
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // userStatus
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userCredit
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // idealMoney
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userFrom
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // userFromUrl
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // userLabel
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // shebieId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ridingprice
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // lockid
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // userPic
            cursor.getFloat(offset + 23), // openmoney
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // userLevel
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // userLevelEndTime
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // barCode
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // lockmac
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // locktype
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // lockdata
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // starttime
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // idno
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // userName
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // forcemoney
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // cardprice
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // isbuyridingcard
            cursor.getFloat(offset + 36), // newopenmoney
            cursor.getFloat(offset + 37) // warningmoney
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntityBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNicName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdcheck(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPinNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLoginTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeposit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDefaultDeposit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrderNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserMoney(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserBonus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserStatus(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserCredit(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIdealMoney(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserFrom(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUserFromUrl(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUserLabel(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setShebieId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRidingprice(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLockid(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUserPic(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOpenmoney(cursor.getFloat(offset + 23));
        entity.setUserLevel(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setUserLevelEndTime(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setBarCode(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setLockmac(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLocktype(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setLockdata(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setStarttime(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setIdno(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setUserName(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setForcemoney(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setCardprice(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setIsbuyridingcard(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setNewopenmoney(cursor.getFloat(offset + 36));
        entity.setWarningmoney(cursor.getFloat(offset + 37));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserEntityBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserEntityBean entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
