package com.sunshine.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.coolu.nokelock.bike.bean.BikeOrderBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BIKE_ORDER_BEAN".
*/
public class BikeOrderBeanDao extends AbstractDao<BikeOrderBean, Long> {

    public static final String TABLENAME = "BIKE_ORDER_BEAN";

    /**
     * Properties of entity BikeOrderBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNumber = new Property(1, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property Mac = new Property(2, String.class, "mac", false, "MAC");
        public final static Property LockType = new Property(3, String.class, "lockType", false, "LOCK_TYPE");
        public final static Property StartTime = new Property(4, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, String.class, "endTime", false, "END_TIME");
        public final static Property Barcode = new Property(6, String.class, "barcode", false, "BARCODE");
        public final static Property Key = new Property(7, String.class, "key", false, "KEY");
        public final static Property Password = new Property(8, String.class, "password", false, "PASSWORD");
        public final static Property Shebeiid = new Property(9, String.class, "shebeiid", false, "SHEBEIID");
    };


    public BikeOrderBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BikeOrderBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BIKE_ORDER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_NUMBER\" TEXT," + // 1: orderNumber
                "\"MAC\" TEXT," + // 2: mac
                "\"LOCK_TYPE\" TEXT," + // 3: lockType
                "\"START_TIME\" TEXT," + // 4: startTime
                "\"END_TIME\" TEXT," + // 5: endTime
                "\"BARCODE\" TEXT," + // 6: barcode
                "\"KEY\" TEXT," + // 7: key
                "\"PASSWORD\" TEXT," + // 8: password
                "\"SHEBEIID\" TEXT);"); // 9: shebeiid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BIKE_ORDER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BikeOrderBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(3, mac);
        }
 
        String lockType = entity.getLockType();
        if (lockType != null) {
            stmt.bindString(4, lockType);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(7, barcode);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(8, key);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String shebeiid = entity.getShebeiid();
        if (shebeiid != null) {
            stmt.bindString(10, shebeiid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BikeOrderBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(3, mac);
        }
 
        String lockType = entity.getLockType();
        if (lockType != null) {
            stmt.bindString(4, lockType);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(7, barcode);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(8, key);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String shebeiid = entity.getShebeiid();
        if (shebeiid != null) {
            stmt.bindString(10, shebeiid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BikeOrderBean readEntity(Cursor cursor, int offset) {
        BikeOrderBean entity = new BikeOrderBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mac
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lockType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // barcode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // key
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // password
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // shebeiid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BikeOrderBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMac(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLockType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBarcode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShebeiid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BikeOrderBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BikeOrderBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
